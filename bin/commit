#!/usr/bin/env bash


# === LOAD USER CONFIG ===
source "$(dirname "$0")/config.sh"

# === DYNAMIC CONFIG ===
GEMINI_URL="https://generativelanguage.googleapis.com/v1beta/models/$MODEL_NAME:generateContent"
MAX_LENGTH=2000

# === Optional prefix like: ./commit.sh -- "fix #1" ===
PREFIX=""
for i in "$@"; do
  if [[ "$i" == "--" ]]; then
    shift
    PREFIX="$*"
    break
  fi
done

# === 1Ô∏èCheck for changes ===
if [[ -z $(git status --porcelain) ]]; then
    echo "No changes to commit."
    exit 0
fi

# === 2Ô∏èStage changes ===
git add .

# === 3Ô∏èGet and trim diff ===
DIFF=$(git diff --cached)
if [ ${#DIFF} -gt $MAX_LENGTH ]; then
    DIFF="${DIFF:0:$MAX_LENGTH}..."
fi

# === 4Ô∏èEscape diff for JSON using Python ===
ESCAPED_DIFF=$(printf '%s' "$DIFF" | "$PYTHON_PATH" -c 'import json,sys; print(json.dumps(sys.stdin.read())[1:-1])')

# === Show diff sent to Gemini ===
echo "DIFF SENT TO GEMINI:"
echo "$ESCAPED_DIFF"

# === 5Ô∏èConstruct prompt and payload ===
PROMPT="Write only one concise Git commit message for the following code changes. No explanations, no formatting, just the message in maximum 5-10 words."

JSON_PAYLOAD=$(cat <<EOF
{
  "contents": [
    {
      "parts": [
        {
          "text": "$PROMPT\n\n$ESCAPED_DIFF"
        }
      ]
    }
  ]
}
EOF
)

# === 6Ô∏èCall Gemini API ===
RESPONSE=$(curl -s -X POST \
  -H "Content-Type: application/json" \
  -d "$JSON_PAYLOAD" \
  "$GEMINI_URL?key=$API_KEY")

# === 7Ô∏èDebug output ===
echo "üîç Gemini API Response:"
echo "$RESPONSE"

# === 8Ô∏èExtract commit message ===
COMMIT_MSG=$(echo "$RESPONSE" | grep -oP '"text":\s*"\K[^"]+' | head -n 1)

# === 9Ô∏èFallback if empty ===
if [[ -z "$COMMIT_MSG" ]]; then
    echo "Gemini did not return a valid commit message. Using fallback."
    COMMIT_MSG="Auto commit"
fi

# === Clean merge and strip newline ===
if [[ -n "$PREFIX" ]]; then
  CLEAN_PREFIX=$(echo "$PREFIX" | awk '{print tolower($1)}')
  CLEAN_COMMIT=$(echo "$COMMIT_MSG" | sed -E "s/^($CLEAN_PREFIX[:]?)[[:space:]]+//i")
  FINAL_COMMIT_MSG="$PREFIX $CLEAN_COMMIT"
else
  FINAL_COMMIT_MSG="$COMMIT_MSG"
fi

FINAL_COMMIT_MSG=$(echo "$FINAL_COMMIT_MSG" | sed 's/\\n//g' | tr -d '\n\r')

echo "Commit message: $FINAL_COMMIT_MSG"

# === Commit and push ===
git commit -m "$FINAL_COMMIT_MSG"
git push

echo " Done!"
